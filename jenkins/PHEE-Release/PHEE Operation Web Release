pipeline { 

  environment { 
      registry = "oaftech.azurecr.io/phee-ns/ops-web" 
      registryCredential = 'azdockerpass' 
      registryIBM = "us.icr.io/phee-ns/ops-web" 
      registryCredentialIBM = 'ibmcr'
      // tag = sh(returnStdout: true, script: "git rev-parse --short=10 HEAD | sed 's/[^a-zA-Z0-9]/-/g'").trim()
      tag = 'v1.3.0'
      gitcode = 'https://github.com/openmf/ph-ee-operations-web.git'
  }
  
  options {
        skipStagesAfterUnstable()
  }

  agent any 

  stages { 
      stage('Init'){
          steps{
              script {
                currentBuild.description = "Tag: ${tag}"
              }
          }
      }
      stage('Cloning from Git') { 
          steps { 
              // git 'https://github.com/openmf/ph-ee-connector-mpesa.git' 
              checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: gitcode ]], branches: [[name: 'refs/tags/' + "${tag}"]]], poll: false
          }
      } 
      
      //stage('Building JAR') {
      //    steps {
      //        sh './gradlew bootJar'
      //    }
      //}

      stage('Building OAF Azure image') { 
          // when { tag "v*" }
          steps {
              // sh 'echo $TAG_NAME | tr -d \'\n\''
              script { 
                   dockerImage2 = docker.build registry + ":${tag}"
              }
          } 
      }

      stage('Deploy OAF Azure image') { 
          steps { 
              script { 
                  docker.withRegistry( 'https://oaftech.azurecr.io', registryCredential ) { 
                      dockerImage2.push()
                  }
              } 
          }
      } 
      
      
       stage('Building IBM QA image') { 
          steps { 
              script { 
                  dockerImage2 = docker.build registryIBM + ":${tag}"
              }
          } 
      }
      
      /*stage('Deploy IBM QA image') { 
          steps { 
              script { 
                  docker.withRegistry( 'https://us.icr.io', registryCredentialIBM ) { 
                      dockerImage2.push()
                  }
              }  
          }
      } */

      stage('Cleaning up') { 
          steps { 
              sh "docker image rmi -f \$(docker image ls -q) 2>&1 || true" 
          }
      } 
    }
}
